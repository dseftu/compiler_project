Compiler for COP 3402 - Systems Software
Authored by Dallas Seroski and David M. Allen
Spring 2017
=============================================
nested Program (sample.pl0)

Tests a basic program.

const foo = 3, bar = 2;
var x, y, z;
begin
	y := 3;
	x := y + 56;
	write x;
	z:= 4;
	x:= y + 60;
	write y;
	write z;
	write x;
end.


.\bin\compiler.exe .\GoodPL0Files\sample.pl0


 Expected output: 59, 3, 4, 63


Lexeme List:
28 2 foo 9 3 3 17 2 bar 9 3 2 18 29 2 x 17 2 y 17 2 z 18 21 2 y 20 3 3 18 2 x 20 2 y 4 3 56 18 31 2 x 18 2 z 20 3 4 18 2 x 20 2 y 4 3 60 18 31 2 y 18 31 2 z 18 31 2 x 18 22 19 

No errors, program is syntactically correct.

Line	OP	R	L	M
0	jmp	0	0	1
1	inc	0	0	7
2	lit	0	0	3
3	inc	0	0	1
4	sto	0	0	8
5	lod	0	0	8
6	sto	0	0	6
7	lod	0	0	6
8	inc	0	0	1
9	sto	0	0	9
10	lit	0	0	56
11	inc	0	0	1
12	sto	0	0	10
13	lod	0	0	10
14	lod	1	0	9
15	add	1	1	0
16	sto	1	0	10
17	lod	0	0	10
18	sto	0	0	5
19	lod	0	0	5
20	sio	0	0	1
21	lit	0	0	4
22	inc	0	0	1
23	sto	0	0	11
24	lod	0	0	11
25	sto	0	0	7
26	lod	0	0	6
27	inc	0	0	1
28	sto	0	0	12
29	lit	0	0	60
30	inc	0	0	1
31	sto	0	0	13
32	lod	0	0	13
33	lod	1	0	12
34	add	1	1	0
35	sto	1	0	13
36	lod	0	0	13
37	sto	0	0	5
38	lod	0	0	6
39	sio	0	0	1
40	lod	0	0	7
41	sio	0	0	1
42	lod	0	0	5
43	sio	0	0	1
44	rtn	0	0	0
45	sio	0	0	3


Initial Values				PC	BP	SP
1	jmp	0	0	1	1	1	0	0
2	inc	0	0	7	2	1	7	0	0	0	0	0	0	0	0
3	lit	0	0	3	3	1	7	0	0	0	0	0	0	0	0
4	inc	0	0	1	4	1	8	0	0	0	0	0	0	0	0	0
5	sto	0	0	8	5	1	8	0	0	0	0	0	0	0	0	0
6	lod	0	0	8	6	1	8	0	0	0	0	0	0	0	0	0
7	sto	0	0	6	7	1	8	0	0	0	0	0	0	0	3	0
8	lod	0	0	6	8	1	8	0	0	0	0	0	0	0	3	0
9	inc	0	0	1	9	1	9	0	0	0	0	0	0	0	3	0	3
10	sto	0	0	9	10	1	9	0	0	0	0	0	0	0	3	0	3
11	lit	0	0	56	11	1	9	0	0	0	0	0	0	0	3	0	3
12	inc	0	0	1	12	1	10	0	0	0	0	0	0	0	3	0	3	3
13	sto	0	0	10	13	1	10	0	0	0	0	0	0	0	3	0	3	3
14	lod	0	0	10	14	1	10	0	0	0	0	0	0	0	3	0	3	3
15	lod	1	0	9	15	1	10	0	0	0	0	0	0	0	3	0	3	3
16	add	1	1	0	16	1	10	0	0	0	0	0	0	0	3	0	3	3
17	sto	1	0	10	17	1	10	0	0	0	0	0	0	0	3	0	3	3
18	lod	0	0	10	18	1	10	0	0	0	0	0	0	0	3	0	3	3
19	sto	0	0	5	19	1	10	0	0	0	0	0	0	59	3	0	3	3
20	lod	0	0	5	20	1	10	0	0	0	0	0	0	59	3	0	3	3
59
21	sio	0	0	1	21	1	10	0	0	0	0	0	0	59	3	0	3	3
22	lit	0	0	4	22	1	10	0	0	0	0	0	0	59	3	0	3	3
23	inc	0	0	1	23	1	11	0	0	0	0	0	0	59	3	0	3	3	59
24	sto	0	0	11	24	1	11	0	0	0	0	0	0	59	3	0	3	3	59
25	lod	0	0	11	25	1	11	0	0	0	0	0	0	59	3	0	3	3	59
26	sto	0	0	7	26	1	11	0	0	0	0	0	0	59	3	4	3	3	59
27	lod	0	0	6	27	1	11	0	0	0	0	0	0	59	3	4	3	3	59
28	inc	0	0	1	28	1	12	0	0	0	0	0	0	59	3	4	3	3	59	4
29	sto	0	0	12	29	1	12	0	0	0	0	0	0	59	3	4	3	3	59	4
30	lit	0	0	60	30	1	12	0	0	0	0	0	0	59	3	4	3	3	59	4
31	inc	0	0	1	31	1	13	0	0	0	0	0	0	59	3	4	3	3	59	4	3
32	sto	0	0	13	32	1	13	0	0	0	0	0	0	59	3	4	3	3	59	4	3
33	lod	0	0	13	33	1	13	0	0	0	0	0	0	59	3	4	3	3	59	4	3
34	lod	1	0	12	34	1	13	0	0	0	0	0	0	59	3	4	3	3	59	4	3
35	add	1	1	0	35	1	13	0	0	0	0	0	0	59	3	4	3	3	59	4	3
36	sto	1	0	13	36	1	13	0	0	0	0	0	0	59	3	4	3	3	59	4	3
37	lod	0	0	13	37	1	13	0	0	0	0	0	0	59	3	4	3	3	59	4	3
38	sto	0	0	5	38	1	13	0	0	0	0	0	0	63	3	4	3	3	59	4	3
39	lod	0	0	6	39	1	13	0	0	0	0	0	0	63	3	4	3	3	59	4	3
3
40	sio	0	0	1	40	1	13	0	0	0	0	0	0	63	3	4	3	3	59	4	3
41	lod	0	0	7	41	1	13	0	0	0	0	0	0	63	3	4	3	3	59	4	3
4
42	sio	0	0	1	42	1	13	0	0	0	0	0	0	63	3	4	3	3	59	4	3
43	lod	0	0	5	43	1	13	0	0	0	0	0	0	63	3	4	3	3	59	4	3
63
44	sio	0	0	1	44	1	13	0	0	0	0	0	0	63	3	4	3	3	59	4	3
45	rtn	0	0	0	0	0	0	0
=============================================
test2 Program (test2.pl0)

Tests recursion.  Answer should be 3!.

var f, n;
procedure fact;
var ans1;
begin
  ans1:=n;
  n:= n-1;
  if n = 0 then f := 1;
  if n > 0 then call fact;
  f:=f*ans1;
end;

begin
  n:=3;
  call fact;
  write f;
end.


.\bin\compiler.exe .\GoodPL0Files\test2.pl0


 Expected output: 6

No errors, program is syntactically correct.

6
=============================================
test3 Program (test3.pl0)

Tests procedures.

var x, y;
procedure gak;
var z;
begin
  z := 2;
  write z;
end;
begin
  x := 5;
  write x;
  call gak;
  y:= x + 5;
  write y;
  write x;  
end.

.\bin\compiler.exe .\GoodPL0Files\test3.pl0


 Expected output: 5, 2, 10, 5

No errors, program is syntactically correct.

5
2
10
5
=============================================
nested Program (nested.pl0)

Tests functionality of nested procedures.


var x,y,z,v,w;
procedure a;
  var x,y,u,v;
  procedure b;
    var y,z,v;
    procedure c;
      var y,z;
      begin /* proc c */
        z:=1; /* z is local */
        x:= y + z + w; /* x_a = y_c + z_c + w_base = (0 + 1 + 5) = 6 */
        write x; /* should print 6 */
      end;
    begin /* proc b */
      y:= x + u + w; /* y_b = x_a + u_a + w_base (0 + 7 + 5) = 12 */
      write y; /* should write 12 */
      call c
    end;
  begin /* proc a */
    z:=2; /* sets z_base to 2 */
    u:= z + w; /* sets u_a to 2 + w_base (5) = 7 */    
    write u; /* should write 7 */
    call b
  end;
begin /* main */
  x:=1; y:=2; z:=3; v:=4; w:=5;
  x:= v + w; /* x_0 should be 9 now */
  write x; /* should write number 9 */
  call a;
  write w;
end.


.\bin\compiler.exe .\GoodPL0Files\nested.pl0


 Expected output: 9, 7, 12, 6, 5

No errors, program is syntactically correct.

9
7
12
6
5
=============================================
nested Program (test.pl0)

Tests functionality of if then else


var x, w;
begin
	x:= 4;
	read w;
	if w > x then
		w:= w + 1
	else
		w:= x;
	write w;
end.


.\bin\compiler.exe .\GoodPL0Files\test.pl0

Expected input: integer

"Expected output: if input > 4, then print input + 1.  Else print 4.

Enter a value after the prompt.
No errors, program is syntactically correct.


4
=============================================
Multiply, Divide, and GCD Program (wirth1.pl0)

Last minute test case added from wirth book


const m = 7, n = 85;
var x,y,z,q,r;
procedure multiply;
  var a,b;
  begin a := x; b := y; z := 0;
    while b > 0 do
      begin
        if odd b then z := z + a;
	a := 2*a; b := b/2;
      end
  end;

procedure divide;
  var w;
  begin r := x; q := 0; w := y;
    while w <= r do w := w*2;
    while w > y do
      begin q := 2*q; w := w/2;
        if w <= r then
  	    begin r := r-w; q := q + 1
	    end
      end
  end;

procedure gcd;
  var f,g;
  begin f := x; g := y;
    while f <> g do
      begin if f < g then g := g - f;
            if g < f then f := f - g;
        end;
    z := f
  end;

begin
	x := m; y := n; call multiply;
    write z;
	x := 25; y := 3; call divide;
    write q;
	x := 84; y := 36; call gcd;
    write z;
end. 

.\bin\compiler.exe .\GoodPL0Files\wirth1.pl0


 Expected output: 595, 8, 12

No errors, program is syntactically correct.

595
8
12
=============================================
Multiply, Divide, and GCD Program WITH ERRORS (wirth2_error.pl0)

Last minute test case added from wirth book


const m = 7, n = 85
var x,y,z,q,r;
procedure multiply;
  var a,b
  begin a := u; b := y; z := 0
    while b > 0 do
      begin
        if odd b do z := z + a;
      
	a := a; b := b/2;
      end
  end;

procedure divide
  var w;
  const two = 2, three := 3;
  begin r = x; q := 0; w := y;

    while w <= r do w := two*w;
    while x > y
      begin q := (2*q; w := w/2);
        if w <= r then
  	  begin r := r-w q := q + 1
	  end
      end
  end;

procedure gcd;
  var f,g;
  begin f := x; g := y
    while f <> g do
      begin if f < g then g := g - f;
            if g < f then f := f - g;
    z := f
  end;

begin
	x := m; y := n; call multiply;
	x := 25; y := 3; call divide;
	x := 84; y := 36; call gcd;
	call x; x := gcd; gcd = x

end . 

.\bin\compiler.exe .\GoodPL0Files\wirth2_error.pl0


 Expected output: Multiple errors


Error (17)
Semicolon or } expected.

Error (17)
Semicolon or } expected.
Undeclared identifier.
